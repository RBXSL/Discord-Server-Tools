import discord
from discord.ext import commands, tasks
import asyncio

# ---------------- CONFIG ----------------
TRIGGER = ""                 # Trigger command to assign/create role
ROLE_NAME = ""              # Optional: used if creating a new role
ROLE_COLOR = 0xFFFFF                # Optional: color for new role
EXISTING_ROLE_IDS = []               # Optional: list of existing role IDs to update
GUILD_ID = 1234567890123456789        # Your server ID
ASSIGN_TO = []                        # List of member IDs to assign role to
ASSIGN_TO_EVERYONE = False            # True = assign role to everyone
BATCH_AMOUNT = 5                       # Number of members per batch
BATCH_DELAY = 2.0                      # Seconds to wait between batches
PERMISSIONS = {                        # Valid Discord permissions only
    "create_instant_invite": True,
    "kick_members": True,
    "ban_members": True,
    "administrator": True,
    "manage_channels": True,
    "manage_guild": True,
    "add_reactions": True,
    "view_audit_log": True,
    "priority_speaker": True,
    "stream": True,
    "view_channel": True,
    "send_messages": True,
    "send_tts_messages": True,
    "manage_messages": True,
    "embed_links": True,
    "attach_files": True,
    "read_message_history": True,
    "mention_everyone": True,
    "use_external_emojis": True,
    "view_guild_insights": True,
    "connect": True,
    "speak": True,
    "mute_members": True,
    "deafen_members": True,
    "move_members": True,
    "use_voice_activation": True,
    "change_nickname": True,
    "manage_nicknames": True,
    "manage_roles": True,
    "manage_webhooks": True,
    "manage_emojis": True,
    "use_application_commands": True,
    "request_to_speak": True,
    "manage_events": True,
    "manage_threads": True,
    "create_public_threads": True,
    "create_private_threads": True,
    "use_external_stickers": True,
    "send_messages_in_threads": True
}
# -----------------------------------------

intents = discord.Intents.default()
intents.guilds = True
intents.members = True
intents.messages = True
intents.message_content = True

bot = commands.Bot(command_prefix="", intents=intents)


async def create_or_update_roles(guild):
    roles_to_use = []

    # Handle existing roles
    for rid in EXISTING_ROLE_IDS:
        role = guild.get_role(rid)
        if role:
            perms = discord.Permissions(**PERMISSIONS)
            await role.edit(permissions=perms, reason="Updated by script")
            roles_to_use.append(role)
        else:
            print(f"Role ID {rid} not found in guild.")

    # Create new role if ROLE_NAME is set
    if ROLE_NAME:
        existing = discord.utils.get(guild.roles, name=ROLE_NAME)
        if not existing:
            perms = discord.Permissions(**PERMISSIONS)
            role = await guild.create_role(
                name=ROLE_NAME,
                color=discord.Color(ROLE_COLOR),
                permissions=perms,
                reason="Created by script"
            )
            roles_to_use.append(role)
        else:
            roles_to_use.append(existing)

    return roles_to_use


async def assign_roles(guild, roles):
    # Determine members to assign
    members = []
    if ASSIGN_TO_EVERYONE:
        members = [m for m in guild.members if not m.bot]
    elif ASSIGN_TO:
        members = [guild.get_member(mid) for mid in ASSIGN_TO if guild.get_member(mid)]

    if not members:
        print("No members to assign roles to.")
        return

    # Batch assign roles
    for i in range(0, len(members), BATCH_AMOUNT):
        batch = members[i:i + BATCH_AMOUNT]
        for member in batch:
            for role in roles:
                try:
                    await member.add_roles(role, reason="Assigned by script")
                    print(f"Assigned {role.name} to {member.name}")
                except discord.Forbidden:
                    print(f"Missing permissions to assign {role.name} to {member.name}")
                except discord.HTTPException as e:
                    print(f"HTTP error assigning {role.name} to {member.name}: {e}")
        await asyncio.sleep(BATCH_DELAY)


@bot.event
async def on_ready():
    print(f"âœ… Logged in as {bot.user}")


@bot.event
async def on_message(message):
    if message.author.bot:
        return
    if message.content.lower().strip() != TRIGGER.lower():
        return

    guild = bot.get_guild(GUILD_ID)
    if not guild:
        print("Guild not found.")
        return

    roles = await create_or_update_roles(guild)
    await assign_roles(guild, roles)


bot.run("BOT_TOKEN_HERE")
